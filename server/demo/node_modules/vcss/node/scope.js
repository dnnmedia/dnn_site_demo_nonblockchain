"use strict";

var _inherits = function (child, parent) {
  child.prototype = Object.create(parent && parent.prototype, {
    constructor: {
      value: child,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (parent) child.__proto__ = parent;
};

var _interopRequire = function (obj) {
  return obj && (obj["default"] || obj);
};

var Block = _interopRequire(require("./block"));

var Ruleset = _interopRequire(require("./ruleset"));

var Scope = function Scope() {
  this.children = [];
};

_inherits(Scope, Block);

Scope.prototype.add = function (sel, decs) {
  if (sel instanceof Block) {
    this.children.push(sel);
  } else {
    var rule = new Ruleset(sel, decs);
    this.children.push(rule);
  }
  return this;
};

Scope.prototype.remove = function (dec) {
  this.children = this.children.filter(function (v) {
    return dec == v;
  });
};

Scope.prototype.serialize = function () {
  return this.children.map(function (child) {
    return child.serialize();
  }).join("");
};

module.exports = Scope;

