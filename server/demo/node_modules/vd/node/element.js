"use strict";

var _slice = Array.prototype.slice;
var _inherits = function (child, parent) {
  child.prototype = Object.create(parent && parent.prototype, {
    constructor: {
      value: child,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (parent) child.__proto__ = parent;
};

var _interopRequire = function (obj) {
  return obj && (obj["default"] || obj);
};

var Text = _interopRequire(require("./text"));

var Node = _interopRequire(require("./node"));

var voidElements = _interopRequire(require("void-elements"));

var flatten = _interopRequire(require("array-flatten"));

var voidTags = new Set(voidElements);

var Element = function Element(tagName, isVoid) {
  this.name = tagName;
  this.props = new Map();
  this.children = [];
  if (null != isVoid) {
    this["void"] = isVoid;
  } else {
    this["void"] = voidTags.has(tagName);
  }
};

_inherits(Element, Node);

Element.prototype.add = function () {
  var _this = this;
  var children = _slice.call(arguments);

  flatten(children).filter(function (v) {
    return null != v && "boolean" != typeof v;
  }).map(function (v) {
    if ("string" == typeof v || "number" == typeof v) {
      return new Text(String(v));
    } else {
      return v;
    }
  }).forEach(function (v) {
    _this.children.push(v);
  });
  return this;
};

Element.prototype.empty = function () {
  this.children = [];
  return this;
};

Element.prototype.remove = function (child) {
  this.children = this.children.filter(function (v) {
    return v == child;
  });
  return this;
};

Element.prototype.set = function (prop, value) {
  if ("object" == typeof prop) {
    for (var key in prop) {
      this.set(key, prop[key]);
    }
  } else {
    if ("text" == prop) {
      this.add(null == value ? "" : value);
    } else {
      this.props.set(prop, value);
    }
  }
  return this;
};

Element.prototype.toHTML = function () {
  var tag = this.name.toLowerCase();
  var html = "<" + tag;

  // attributes
  this.props.forEach(function (val, key) {
    html += " " + key + "=" + JSON.stringify(val);
  });

  html += ">";

  // children
  var contentLength = 0;
  this.children.forEach(function (el) {
    var _add = el.toHTML();
    contentLength += _add.length;
    html += _add;
  });

  // closing
  if (contentLength || !this["void"]) {
    html += "</" + tag + ">";
  }

  return html;
};

module.exports = Element;

