"use strict";

module.exports = parse;
// parses:
// <a href="#">
// a href="#" title=woot
// div.main
// div.left.red
// div.left.red class=woot
// .left.red

function parse(str) {
  var pieces = str.replace(/^</, "").replace(/>$/, "").split(/\s+/);

  var _ref = parseTag(pieces.shift());

  var tag = _ref.tag;
  var classes = _ref.classes;
  var attrs = parseAttrs(pieces.join(" "));

  // merge classes
  if (classes.length || null != attrs["class"]) {
    attrs["class"] = classes.join(" ") + (null == attrs["class"] ? "" : attrs["class"]);
  }

  return { tag: tag, attrs: attrs };
}

function parseTag(str) {
  var ret = {};
  var tag = str.match(/^[^\.]+/);
  var classes = str.match(/\.([^\.]+)/g);

  // defaults
  tag = tag ? tag[0] : "div";
  classes = classes || [];

  // remove leading `.`
  classes = classes.map(function (v) {
    return v.substr(1);
  });

  return { tag: tag, classes: classes };
}

function parseAttrs(str) {
  var attrs = {};
  var key = undefined, val = undefined, stop = undefined;

  for (var i = 0; i < str.length; i++) {
    var chr = str[i];

    if (null == val) {
      // accumulating key
      if (null == key) key = "";
      if ("=" == chr) {
        val = "";
      } else if (/\s/.test(chr)) {
        if (key.length) {
          attrs[key] = true;
          key = null;
        }
      } else {
        key += chr;
      }
    } else {
      // accumulating value
      var stopped = undefined;

      if (!stop) {
        if (/['"]/.test(chr)) {
          stop = new RegExp(chr);
        } else {
          stop = /\s/;
          val += chr;
        }
      } else {
        stopped = stop.test(chr);
        if (!stopped) val += chr;
      }

      if (stopped || i + 1 == str.length) {
        attrs[key] = val;
        key = val = stop = null;
      }
    }
  }

  // use `true` for missing values
  if (null != key) attrs[key] = true;

  return attrs;
}

