
import Node from './node';
import Text from './text';
import Style from './style';
import Element from './element';
import parse from './parse';

export default build;
export { Node };
export { Text };
export { Element };
export { Style };
export { style };

function build(sel, ...children){
  let { tag, attrs } = parse(sel);
  let el = new Element(tag);

  if (isProperties(children[0])) {
    let props = children.shift();
    for (let i in props) {
      if ('class' == i && null != attrs.class) {
        // special case `class` to append
        // if present through tag
        attrs.class += ' ' + props.class;
      } else {
        attrs[i] = props[i];
      }
    }
  }

  if (attrs) el.set(attrs);
  if (children) el.add(children);

  return el;
}

// differentiates plain object from children
function isProperties(obj){
  return obj
    && 'object' == typeof obj
    && !Array.isArray(obj)
    && !(obj instanceof Node);
}

// style helper
function style(){
  return new Style;
}
