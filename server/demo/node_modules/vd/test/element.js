
import assert from 'assert';
import { Text } from '../lib';
import { Element } from '../lib';

describe('Element', () => {
  it('should recognize void tags', () => {
    let el = new Element('p');
    assert(!el.void);

    let el = new Element('img');
    assert(el.void);

    let el = new Element('custom', true);
    assert(el.void);

    let el = new Element('custom', false);
    assert(!el.void);
  });

  it('should add single text node', () => {
    let el = new Element('a');
    el.add('some content');
    assert(1 == el.children.length);
    assert(el.children[0] instanceof Text);
    el.add('some content');
    assert(2 == el.children.length);
    assert(el.children[1] instanceof Text);
  });

  it('should convert to html', () => {
    let el = new Element('p');
    assert('<p></p>' == el.toHTML());
  });

  it('should convert void to html', () => {
    let el = new Element('input');
    assert('<input>' == el.toHTML());
  });

  it('should convert to html with text', () => {
    let el = new Element('a');
    el.add('Some text');
    assert('<a>Some text</a>' == el.toHTML());
  });

  it('should convert to html (nested)', () => {
    let el = new Element('a');
    el.add('Woot ');

    let el2 = new Element('a');
    el2.add('Hello World');

    el.add(el2);
    assert('<a>Woot <a>Hello World</a></a>' == el.toHTML());
  });

  it('should properly escape quotes in attributes', () => {
    let el = new Element('img');
    el.set({
      'title': 'Some title with "quotes"',
      'alt': "Alternative 'text' haha"
    });
    assert('<img title="Some title with \\"quotes\\"" '
      + 'alt="Alternative \'text\' haha">' == el.toHTML());
  });

  it('should work with number attributes', () => {
    let el = new Element('input');
    el.set('maxlength', 2);
    assert('<input maxlength=2>' == el.toHTML());
  });

});
